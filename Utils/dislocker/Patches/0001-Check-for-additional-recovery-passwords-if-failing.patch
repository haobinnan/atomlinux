From 4e36b244e3e66e7aac9bd1daa3a31ce63793a66c Mon Sep 17 00:00:00 2001
From: Didi Kohen <kohen.d@gmail.com>
Date: Tue, 24 Nov 2020 23:19:56 +0200
Subject: [PATCH 01/14] Check for additional recovery passwords if failing

---
 include/dislocker/metadata/vmk.h    | 2 +-
 src/accesses/rp/recovery_password.c | 6 +++++-
 src/accesses/user_pass/user_pass.c  | 2 +-
 src/metadata/datums.c               | 2 +-
 src/metadata/vmk.c                  | 8 ++++++--
 5 files changed, 14 insertions(+), 6 deletions(-)

diff --git a/include/dislocker/metadata/vmk.h b/include/dislocker/metadata/vmk.h
index 730f11e..ae4e03f 100644
--- a/include/dislocker/metadata/vmk.h
+++ b/include/dislocker/metadata/vmk.h
@@ -36,7 +36,7 @@ int get_vmk_from_clearkey(dis_metadata_t dis_meta, void** vmk_datum);
 
 int get_vmk_datum_from_guid(dis_metadata_t dis_meta, guid_t guid, void** vmk_datum);
 
-int get_vmk_datum_from_range(dis_metadata_t dis_meta, uint16_t min_range, uint16_t max_range, void** vmk_datum);
+int get_vmk_datum_from_range(dis_metadata_t dis_meta, uint16_t min_range, uint16_t max_range, void** vmk_datum, void* prev_vmk_datum);
 
 int get_vmk(datum_aes_ccm_t* vmk_datum, uint8_t* recovery_key,
             size_t key_size, datum_key_t** vmk);
diff --git a/src/accesses/rp/recovery_password.c b/src/accesses/rp/recovery_password.c
index f9891eb..2ac956a 100644
--- a/src/accesses/rp/recovery_password.c
+++ b/src/accesses/rp/recovery_password.c
@@ -70,6 +70,7 @@ int get_vmk_from_rp2(dis_metadata_t dis_meta, uint8_t* recovery_password,
 	uint8_t salt[16] = {0,};
 
 	int result = FALSE;
+	void* prev_vmk_datum = NULL;
 
 	/* If the recovery password wasn't provide, ask for it */
 	if(!recovery_password)
@@ -84,12 +85,13 @@ int get_vmk_from_rp2(dis_metadata_t dis_meta, uint8_t* recovery_password,
 	                (char *)recovery_password);
 
 
+	while (!result) {
 	/*
 	 * We need a salt contained in the VMK datum associated to the recovery
 	 * password, so go get this salt and the VMK datum first
 	 * We use here the range which should be upper (or equal) than 0x800
 	 */
-	if(!get_vmk_datum_from_range(dis_meta, 0x800, 0xfff, (void**) vmk_datum))
+	if(!get_vmk_datum_from_range(dis_meta, 0x800, 0xfff, (void**) vmk_datum, prev_vmk_datum))
 	{
 		dis_printf(
 			L_ERROR,
@@ -98,6 +100,7 @@ int get_vmk_from_rp2(dis_metadata_t dis_meta, uint8_t* recovery_password,
 		*vmk_datum = NULL;
 		return FALSE;
 	}
+	prev_vmk_datum = *vmk_datum;
 
 
 	/*
@@ -176,6 +179,7 @@ int get_vmk_from_rp2(dis_metadata_t dis_meta, uint8_t* recovery_password,
 	);
 
 	dis_free(recovery_key);
+	}
 
 	return result;
 }
diff --git a/src/accesses/user_pass/user_pass.c b/src/accesses/user_pass/user_pass.c
index b3f31fa..7d4ed05 100644
--- a/src/accesses/user_pass/user_pass.c
+++ b/src/accesses/user_pass/user_pass.c
@@ -89,7 +89,7 @@ int get_vmk_from_user_pass2(dis_metadata_t dis_meta,
 	 * There may be another mean to find the correct datum, but I don't see
 	 * another one here
 	 */
-	if(!get_vmk_datum_from_range(dis_meta, 0x2000, 0x2000, (void**) vmk_datum))
+	if(!get_vmk_datum_from_range(dis_meta, 0x2000, 0x2000, (void**) vmk_datum, NULL))
 	{
 		dis_printf(
 			L_ERROR,
diff --git a/src/metadata/datums.c b/src/metadata/datums.c
index 5cc6480..1c78871 100644
--- a/src/metadata/datums.c
+++ b/src/metadata/datums.c
@@ -757,7 +757,7 @@ int dis_metadata_has_clear_key(dis_metadata_t dis_meta, void** vmk_datum)
 
 	dis_printf(L_DEBUG, "Entering has_clear_key. Returning result of get_vmk_datum_from_range with range between 0x00 and 0xff\n");
 
-	return get_vmk_datum_from_range(dis_meta, 0x00, 0xff, vmk_datum);
+	return get_vmk_datum_from_range(dis_meta, 0x00, 0xff, vmk_datum, NULL);
 }
 
 
diff --git a/src/metadata/vmk.c b/src/metadata/vmk.c
index b2d0a42..cc8d13c 100644
--- a/src/metadata/vmk.c
+++ b/src/metadata/vmk.c
@@ -260,7 +260,7 @@ int get_vmk_datum_from_guid(dis_metadata_t dis_meta, guid_t guid,
  * @return TRUE if result can be trusted, FALSE otherwise
  */
 int get_vmk_datum_from_range(dis_metadata_t dis_meta, uint16_t min_range,
-	uint16_t max_range, void** vmk_datum)
+	uint16_t max_range, void** vmk_datum, void* prev_vmk_datum)
 {
 	// Check parameters
 	if(!dis_meta)
@@ -268,7 +268,11 @@ int get_vmk_datum_from_range(dis_metadata_t dis_meta, uint16_t min_range,
 
 	uint16_t datum_range = 0;
 
-	*vmk_datum = NULL;
+	if (prev_vmk_datum) {
+		*vmk_datum = prev_vmk_datum;
+	} else {
+		*vmk_datum = NULL;
+	}
 
 	while(1)
 	{
-- 
2.25.1

